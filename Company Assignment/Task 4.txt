Task 4: Inner Join,Full Outer Join, Cross Join, Left Outer Join,Right Outer Join  

23. Retrieve Payments with Courier Information  

    SELECT p.PaymentId, p.Amount, p.PaymentDate, c.CourierId, c.SenderName, c.ReceiverName,  
    c.Status,c.TrackingNumber, c.DeliveryDate FROM payment p JOIN courier c 
    ON p.CourierId = c.CourierId;

24. Retrieve Payments with Location Information  

    SELECT p.PaymentId, p.Amount, p.PaymentDate, l.LocationID, l.LocationName, l.Address
    FROM payment p JOIN location l ON p.LocationId = l.LocationID;

25. Retrieve Payments with Courier and Location Information  

    SELECT p.PaymentId, p.Amount, p.PaymentDate, c.CourierId, c.SenderName, c.ReceiverName, 
    c.Status, c.TrackingNumber, c.DeliveryDate, l.LocationID, l.LocationName, l.Address
    FROM payment p JOIN courier c ON p.CourierId = c.CourierId JOIN location l 
    ON p.LocationId = l.LocationID;

26. List all payments with courier details  

    SELECT p.PaymentId, p.Amount, p.PaymentDate, c.CourierId, 
    c.SenderName, c.ReceiverName, c.Status, c.TrackingNumber, 
    c.DeliveryDate FROM payment p JOIN courier c ON p.CourierId = c.CourierId;

27. Total payments received for each courier  

    SELECT c.CourierId, c.SenderName, c.ReceiverName, c.Status, c.TrackingNumber, c.DeliveryDate,
    SUM(p.Amount) AS TotalPaymentsReceived FROM courier c JOIN payment p ON c.CourierId = p.CourierId
    GROUP BY c.CourierId, c.SenderName, c.ReceiverName, c.Status, c.TrackingNumber, c.DeliveryDate;

28. List payments made on a specific date  

    SELECT * FROM payment WHERE PaymentDate = '2024-01-15';

29. Get Courier Information for Each Payment  

    SELECT p.PaymentId, p.Amount, p.PaymentDate, c.CourierId, c.SenderName, 
    c.ReceiverName, c.Status, c.TrackingNumber, c.DeliveryDate
    FROM payment p JOIN courier c ON p.CourierId = c.CourierId;

30. Get Payment Details with Location  

    SELECT p.PaymentId, p.Amount, p.PaymentDate, l.LocationID, l.LocationName, l.Address
    FROM payment p JOIN location l ON p.LocationId = l.LocationID;

31. Calculating Total Payments for Each Courier  

     SELECT c.CourierId, c.SenderName, c.ReceiverName, c.Status, c.TrackingNumber, c.DeliveryDate,
     SUM(p.Amount) AS TotalPayments FROM courier c JOIN payment p ON c.CourierId = p.CourierId
     GROUP BY c.CourierId, c.SenderName, c.ReceiverName, c.Status, c.TrackingNumber, c.DeliveryDate;

32. List Payments Within a Date Range  

    SELECT * FROM payment WHERE PaymentDate BETWEEN '2024-01-03' AND '2024-05-10';

33. Retrieve a list of all users and their corresponding courier records, including cases where there are 
    no matches on either side  
  
    SELECT u.UserID, u.Name AS UserName, c.CourierID, c.SenderName, c.ReceiverName FROM
    user u LEFT JOIN courier c ON u.UserID = c.UserID;

34. Retrieve a list of all couriers and their corresponding services, including cases where there are no 
    matches on either side  

    SELECT Courier.CourierID, Courier.SenderName, Courier.ReceiverName, 
    CourierServices.ServiceID, CourierServices.ServiceName, CourierServices.Cost FROM Courier
    LEFT JOIN CourierServices ON Courier.CourierID = CourierServices.ServiceID ORDER BY Courier.CourierID;

35. Retrieve a list of all employees and their corresponding payments, including cases where there are 
    no matches on either side  

    SELECT Employee.EmployeeID, Employee.Name, Employee.Email, Payment.PaymentID, 
    Payment.Amount, Payment.PaymentDate
    FROM Employee LEFT JOIN Payment ON Employee.EmployeeID = Payment.EmployeeID
    ORDER BY Employee.EmployeeID;

36. List all users and all courier services, showing all possible combinations. 

     SELECT u.UserID, u.Name AS UserName, cs.ServiceID, cs.ServiceName
     FROM User u CROSS JOIN CourierServices cs ORDER BY u.UserID, cs.ServiceID;

37. List all employees and all locations, showing all possible combinations:  

    SELECT e.EmployeeID, e.Name AS EmployeeName, l.LocationID, l.LocationName
    FROM Employee e CROSS JOIN Location l ORDER BY e.EmployeeID, l.LocationID;
    
38. Retrieve a list of couriers and their corresponding sender information (if available)  

    SELECT Courier.CourierID, Courier.SenderName, Courier.SenderAddress,
    User.Name AS SenderName, User.Email AS SenderEmail,
    User.ContactNumber AS SenderContact, User.Address AS SenderAddress
    FROM Courier LEFT JOIN User ON Courier.UserID = User.UserID;

**39. Retrieve a list of couriers and their corresponding receiver information (if available):  

    SELECT Courier.CourierID,
    User.Name AS ReceiverName, User.Email AS ReceiverEmail,
    User.ContactNumber AS ReceiverContact, User.Address AS ReceiverAddress
    FROM Courier LEFT JOIN User ON Courier.UserID = User.UserID;

40. Retrieve a list of couriers along with the courier service details (if available):

    SELECT Courier.CourierID, Courier.SenderName, Courier.ReceiverName, 
    CourierServices.ServiceID,CourierServices.ServiceName, CourierServices.Cost
    FROM Courier LEFT JOIN CourierServices ON Courier.CourierID = CourierServices.ServiceID;

41. Retrieve a list of employees and the number of couriers assigned to each employee:  

    SELECT Employee.EmployeeID, Employee.Name, COUNT(Courier.CourierID) AS NumberOfCouriers
    FROM Employee LEFT JOIN Courier ON Employee.EmployeeID = Courier.EmployeeID
    GROUP BY Employee.EmployeeID, Employee.Name
    ORDER BY Employee.EmployeeID;

42. Retrieve a list of locations and the total payment amount received at each location: 

    SELECT Location.LocationID, Location.LocationName, COALESCE(SUM(Payment.Amount), 0) 
    AS TotalPaymentAmount FROM Location
    LEFT JOIN Payment ON Location.LocationID = Payment.LocationID
    GROUP BY Location.LocationID, Location.LocationName
    ORDER BY Location.LocationID;

**43. Retrieve all couriers sent by the same sender (based on SenderName).  

    SELECT c1.CourierID, c1.SenderName, c1.ReceiverName
    FROM Courier c1
    JOIN Courier c2 ON c1.SenderName = c2.SenderName AND c1.CourierID <> c2.CourierID
    ORDER BY c1.SenderName, c1.CourierID;

**44. List all employees who share the same role.  

    SELECT e1.EmployeeID, e1.Name, e1.Role
    FROM Employee e1
    JOIN Employee e2 ON e1.Role = e2.Role AND e1.EmployeeID <> e2.EmployeeID
    ORDER BY e1.Role, e1.EmployeeID;

**45. Retrieve all payments made for couriers sent from the same location.  

    SELECT p.PaymentID, p.CourierID, p.LocationID, p.Amount
FROM Payment p
JOIN Courier c ON p.CourierID = c.CourierID
JOIN Location l ON c.LocationID = l.LocationID
JOIN (SELECT LocationID, COUNT(CourierID) AS NumCouriers FROM Courier GROUP BY LocationID HAVING COUNT(CourierID) > 1) lc ON lc.LocationID = c.LocationID
ORDER BY p.LocationID, p.PaymentID;
 

**46. Retrieve all couriers sent from the same location (based on SenderAddress).  

    SELECT c1.CourierID, c1.SenderAddress, c1.ReceiverName
    FROM Courier c1
  JOIN Courier c2 ON c1.SenderAddress = c2.SenderAddress AND c1.CourierID <> c2.CourierID
  ORDER BY c1.SenderAddress, c1.CourierID;

47. List employees and the number of couriers they have delivered:  

    SELECT e.EmployeeID, e.Name, COALESCE(COUNT(c.CourierID), 0) AS NumCouriersDelivered
    FROM Employee e
    LEFT JOIN Courier c ON e.EmployeeID = c.EmployeeID
    GROUP BY e.EmployeeID, e.Name
    ORDER BY e.EmployeeID;

48. Find couriers that were paid an amount greater than the cost of their respective courier services

SELECT c.CourierID, c.TrackingNumber, p.Amount, cs.Cost
FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID
JOIN CourierServices cs ON c.CourierID = cs.ServiceID
WHERE p.Amount > cs.Cost
ORDER BY c.CourierID;

Scope: Inner Queries, Non Equi Joins, Equi joins,Exist,Any,All  

49. Find couriers that have a weight greater than the average weight of all couriers  

SELECT CourierID, SenderName, ReceiverName, Weight
FROM Courier
WHERE Weight > (SELECT AVG(Weight) FROM Courier);

50. Find the names of all employees who have a salary greater than the average salary:  

SELECT Name
FROM Employee
WHERE Salary > (SELECT AVG(Salary) FROM Employee);

51. Find the total cost of all courier services where the cost is less than the maximum cost  

SELECT SUM(Cost) AS TotalCost
FROM CourierServices
WHERE Cost < (SELECT MAX(Cost) FROM CourierServices);

52. Find all couriers that have been paid for  

SELECT c.CourierID, c.TrackingNumber, p.PaymentID
FROM Courier c
JOIN Payment p ON c.CourierID = p.CourierID;

53. Find the locations where the maximum payment amount was made  

SELECT l.LocationID, l.LocationName, MAX(p.Amount) AS MaxPaymentAmount
FROM Location l
JOIN Payment p ON l.LocationID = p.LocationID
GROUP BY l.LocationID, l.LocationName
HAVING MAX(p.Amount) = (SELECT MAX(Amount) FROM Payment);

54. Find all couriers whose weight is greater than the weight of all couriers sent by a specific sender 
(e.g., 'SenderName'): 

SELECT c.CourierID, c.SenderName, c.ReceiverName, c.Weight
FROM Courier c
WHERE c.Weight > ALL (SELECT Weight FROM Courier WHERE SenderName = 'SenderName');

 